package com.eaglesakura.test.db.temp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_TEMP_ENTITY".
*/
public class DbTempEntityDao extends AbstractDao<DbTempEntity, String> {

    public static final String TABLENAME = "DB_TEMP_ENTITY";

    /**
     * Properties of entity DbTempEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
    };


    public DbTempEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DbTempEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_TEMP_ENTITY\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"VALUE\" TEXT NOT NULL );"); // 1: value
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_TEMP_ENTITY_UNIQUE_ID ON DB_TEMP_ENTITY" +
                " (\"UNIQUE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_TEMP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbTempEntity entity) {
        stmt.clearBindings();
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(1, uniqueId);
        }
        stmt.bindString(2, entity.getValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbTempEntity entity) {
        stmt.clearBindings();
 
        String uniqueId = entity.getUniqueId();
        if (uniqueId != null) {
            stmt.bindString(1, uniqueId);
        }
        stmt.bindString(2, entity.getValue());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DbTempEntity readEntity(Cursor cursor, int offset) {
        DbTempEntity entity = new DbTempEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uniqueId
            cursor.getString(offset + 1) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbTempEntity entity, int offset) {
        entity.setUniqueId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setValue(cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DbTempEntity entity, long rowId) {
        return entity.getUniqueId();
    }
    
    @Override
    public String getKey(DbTempEntity entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
